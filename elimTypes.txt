natElim ::
  forall (m :: Nat -> *) .
  m Zero ->
  (forall (l :: Nat) . (m l -> m (Succ l))) ->
  forall (n :: Nat) . (m n)


vecElim ::
  forall (a :: *) .
  forall (m :: forall (n :: Nat) . (Vec a n -> *)) .
  m Zero (Nil a) ->
  (forall (k :: Nat) (x :: a) (xs :: Vec a k) . m k xs -> m (Succ k) (Cons a k x xs)) ->
  forall (n :: Nat) .
  forall (xs :: Vec a n) . (m n xs)


finElim ::
  forall (m :: forall (n :: Nat) . (Fin n -> *)) .
  (forall (n :: Nat) . (m (Succ n) (FZero n))) ->
  (forall (n :: Nat) (f :: Fin n) . m n f -> m (Succ n) (FSucc n f)) ->
  forall (n :: Nat) (f :: Fin n) . (m n f)


eqElim ::
  forall (a :: *) .
  forall (m :: forall (x :: a) (y :: a) . Eq a x y -> *) .
  (forall (x :: a) . m x x (Refl a x)) ->
  forall (x :: a)  (y :: a) (eq :: Eq a x y) . (m x y eq)
